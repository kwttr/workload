// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using workload_Data;

#nullable disable

namespace workload_DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231202140010_notNullableReportDecimals")]
    partial class notNullableReportDecimals
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.23");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("workload_Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NormHours")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalInfo = "до 250 часов",
                            CategoryId = 1,
                            Name = "Подготовка к изданию учебных пособий",
                            NormHours = 250m
                        },
                        new
                        {
                            Id = 2,
                            AdditionalInfo = "30 часов на программу",
                            CategoryId = 1,
                            Name = "Подготовка новой рабочей программы учебной дисциплины / программы дополнительного (профессионального) образования",
                            NormHours = 30m
                        },
                        new
                        {
                            Id = 3,
                            AdditionalInfo = "5 часов на программу",
                            CategoryId = 1,
                            Name = "Обновление рабочих программ учебной дисциплины / программы дополнительного (профессионального) образования",
                            NormHours = 5m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Подготовка новых методических разработок",
                            NormHours = 205m
                        },
                        new
                        {
                            Id = 5,
                            AdditionalInfo = "30 часов на программу",
                            CategoryId = 1,
                            Name = "Составление программы практики",
                            NormHours = 30m
                        },
                        new
                        {
                            Id = 6,
                            AdditionalInfo = "5 часов на разработку",
                            CategoryId = 1,
                            Name = "Обновление методических разработок",
                            NormHours = 5m
                        },
                        new
                        {
                            Id = 7,
                            AdditionalInfo = "4 часа на каждый вид интерактивной формы",
                            CategoryId = 1,
                            Name = "Подготовка к лекциям, семинарским, практическим и лабораторным занятиям с применением интерактивных форм обучения",
                            NormHours = 4m
                        },
                        new
                        {
                            Id = 8,
                            AdditionalInfo = "4 часа на лекцию",
                            CategoryId = 1,
                            Name = "Подготовка конспектов лекций для впервые изучаемых дисциплин",
                            NormHours = 4m
                        },
                        new
                        {
                            Id = 9,
                            AdditionalInfo = "2 часа на занятие",
                            CategoryId = 1,
                            Name = "Подготовка к семинарским, практическим и лабораторным занятиям для впервые изучаемых дисциплин",
                            NormHours = 2m
                        },
                        new
                        {
                            Id = 10,
                            AdditionalInfo = "1 час на занятие",
                            CategoryId = 1,
                            Name = "Подготовка конспектов лекций к семинарским, практическим и лабораторным занятиям",
                            NormHours = 1m
                        },
                        new
                        {
                            Id = 11,
                            AdditionalInfo = "60 часов на дисциплину",
                            CategoryId = 1,
                            Name = "Полная актуализация комплекта учебно-методических материалов электронного курса для технологии дистанционного обучения",
                            NormHours = 60m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Name = "Прочие",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 13,
                            AdditionalInfo = "60 часов в год",
                            CategoryId = 2,
                            Name = "Работа в качестве секретаря совета факультета, заседаний кафедры",
                            NormHours = 60m
                        },
                        new
                        {
                            Id = 14,
                            AdditionalInfo = "20 часов в год",
                            CategoryId = 2,
                            Name = "Участие в заседаниях кафедры и совета факультета",
                            NormHours = 20m
                        },
                        new
                        {
                            Id = 15,
                            AdditionalInfo = "до 60 часов",
                            CategoryId = 2,
                            Name = "Работа в методическом совете университета / филиала",
                            NormHours = 60m
                        },
                        new
                        {
                            Id = 16,
                            AdditionalInfo = "60 часов",
                            CategoryId = 2,
                            Name = "Ответственный за методическую работу по кафедре, факультету",
                            NormHours = 60m
                        },
                        new
                        {
                            Id = 17,
                            AdditionalInfo = "100 часов",
                            CategoryId = 2,
                            Name = "Ответственный за работу в системе дистанционного обучения по кафедре",
                            NormHours = 100m
                        },
                        new
                        {
                            Id = 18,
                            AdditionalInfo = "30 часов в год",
                            CategoryId = 2,
                            Name = "Выполнение обязанностей ответственного за контент сайта структурного подразделения университета",
                            NormHours = 30m
                        },
                        new
                        {
                            Id = 19,
                            AdditionalInfo = "10 часов в год",
                            CategoryId = 2,
                            Name = "Взаимопосещение занятий преподавателями",
                            NormHours = 10m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 2,
                            Name = "Выполнение поручений по формированию банка тестовых заданий",
                            NormHours = 30m
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 2,
                            Name = "Выполнение поручений по формированию банка тестовых заданий",
                            NormHours = 30m
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 2,
                            Name = "Выполнение поручений по организации производственной практики",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 2,
                            Name = "Выполнение поручений по организации распределения и выполнения ВКР",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 2,
                            Name = "Прочие",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 3,
                            Name = "Участие в заседаниях совета по науке",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 3,
                            Name = "Выполнение исследований по НИР в соответствии с программой исследований (договором) с представлением отчёта, оформленного по ГОСТ 7.32.-2001",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 3,
                            Name = "Подготовка диссертации согласно плану подготовки диссертации сотрудниками университета (указать выполнение глав)",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 3,
                            Name = "Написание и подготовка к изданию монографии",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 3,
                            Name = "Написание и подготовка к изданию научной статьи в журнале, входящем в базу Web of Science, Scopus",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 3,
                            Name = "Написание и подготовка к изданию научной статьи в журнале из перечня ВАК, журнале \"Вестник СибУПК\"",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 3,
                            Name = "Написание и подготовка к изданию научной статьи в сборнике конференций",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 3,
                            Name = "Участие в научно-практических, научно-методических и других научных мероприятиях с подготовкой доклада (международных, национальных, межвузовских, университетских)",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 3,
                            Name = "Руководство студенческим научным кружком с предоставлением протоколов заседаний кружков; руководство студенческим научно-инновационным проектом с предоставлением отчета о работе",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 3,
                            Name = "Руководство НИРС (научные доклады, конкурсы, олимпиады, в т.ч. профориентационные)",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 3,
                            Name = "Организация и проведение мастер-классов, деловых игр и др. в рамках научных инновационных форумов",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 3,
                            Name = "Подготовка заявок на изобретение, конкурсы российских и международных грантов",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 3,
                            Name = "Подготовка и проведение международных, российских и региональных научно-практических конференций (форумов, семинаров) на базе университета",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 3,
                            Name = "Организация и проведение конкурсов (инновационных проектов, стендовых докладов)",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 3,
                            Name = "Организация и проведение мероприятий, подготовка материалов (концепций, рекомендаций и т.п.) по плану взаимодействия с предприятиями потребительской кооперации, Межрегиональной ассоциацией \"Сибирское соглашение\" вузами, научными учреждениями",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 3,
                            Name = "Подготовка отзыва на автореферат докторских и кандидатских диссертаций",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 3,
                            Name = "Прочие",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 4,
                            Name = "Кураторство обучающихся 1 и 2 курсов с проведением еженедельных консультаций",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 4,
                            Name = "Классное руководство СПО, в том числе проведение классных часов",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 4,
                            Name = "Работа с потенциальными абитуриентами в школах, колледжах (с поступлением в университет), не менее 10 человек",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 4,
                            Name = "Организация и проведение мероприятий по воспитательной работе (на факультете, кафедре)",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 4,
                            Name = "Участие в мероприятиях для абитуриентов, проводимых на базе университета",
                            NormHours = 0m
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 4,
                            Name = "Прочее",
                            NormHours = 0m
                        });
                });

            modelBuilder.Entity("workload_Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Учебно-методическая работа"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Организационно-методическая работа"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Научно-исследовательская работа"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Профориентационная и воспитательная работа"
                        });
                });

            modelBuilder.Entity("workload_Models.CustomRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("NormalizedName", "DepartmentId")
                        .IsUnique();

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("workload_Models.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Degree");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Доцент"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Профессор"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Кандидат"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Доктор"
                        });
                });

            modelBuilder.Entity("workload_Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Кафедра информатики"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Кафедра математики"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Кафедра экономики"
                        });
                });

            modelBuilder.Entity("workload_Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Аспирант"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ассистент"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ведущий научный сотрудник"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Главный научный сотрудник"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Преподаватель"
                        });
                });

            modelBuilder.Entity("workload_Models.ProcessActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateFact")
                        .HasColumnType("TEXT");

                    b.Property<string>("DatePlan")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HoursFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HoursPlan")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NormHours")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPlan")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReportId");

                    b.ToTable("ProcessActivityType");
                });

            modelBuilder.Entity("workload_Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentDegree")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Rate")
                        .HasColumnType("REAL");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("aprilFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("decemberFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("februaryFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("firstSemesterFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("firstSemesterPlan")
                        .HasColumnType("TEXT");

                    b.Property<string>("hodName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("hodPatronymic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("hodSecondName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("januaryFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("juneFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("marchFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("mayFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("novemberFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("octoberFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("secondSemesterFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("secondSemesterPlan")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("septemberFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("surveyFirstSemester")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("surveySecondSemester")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("totalWorkFact")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("totalWorkPlan")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("workload_Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Назначен отчет"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Отправлен на проверку"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Подтверждено"
                        });
                });

            modelBuilder.Entity("workload_Models.TeacherDepartment", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TeacherDepartment");
                });

            modelBuilder.Entity("workload_Models.Teacher", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("DegreeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DegreeId");

                    b.HasIndex("PositionId");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("workload_Models.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("workload_Models.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("workload_Models.ActivityType", b =>
                {
                    b.HasOne("workload_Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("workload_Models.CustomRole", b =>
                {
                    b.HasOne("workload_Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("workload_Models.ProcessActivityType", b =>
                {
                    b.HasOne("workload_Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workload_Models.Report", "Report")
                        .WithMany("ProcessActivities")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("workload_Models.Report", b =>
                {
                    b.HasOne("workload_Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workload_Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workload_Models.Teacher", "Teacher")
                        .WithMany("Reports")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Status");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("workload_Models.TeacherDepartment", b =>
                {
                    b.HasOne("workload_Models.Department", "Department")
                        .WithMany("TeacherDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workload_Models.Teacher", "Teacher")
                        .WithMany("TeacherDepartments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("workload_Models.Teacher", b =>
                {
                    b.HasOne("workload_Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workload_Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("workload_Models.Department", b =>
                {
                    b.Navigation("TeacherDepartments");
                });

            modelBuilder.Entity("workload_Models.Report", b =>
                {
                    b.Navigation("ProcessActivities");
                });

            modelBuilder.Entity("workload_Models.Teacher", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("TeacherDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
